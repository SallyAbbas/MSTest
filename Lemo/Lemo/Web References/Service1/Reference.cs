//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace Lemo.Service1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LimoAllOverSoap", Namespace="http://tempuri.org/")]
    public partial class LimoAllOver : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAllCarsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobDetailsBeforeAssignOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllCompaniesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllDriversOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDriverLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDriverLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeDriverStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeDriverWorkStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback DriverStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback assignDriverToJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerDriverOperationCompleted;
        
        private System.Threading.SendOrPostCallback DriverLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback DriverCLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendNotifcationToDriverOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDriverTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcceptCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcceptCall2OperationCompleted;
        
        private System.Threading.SendOrPostCallback AcceptCall3OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDriversNearMeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessgaeToDriversOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendJobToDriverOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateJobStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateJobExtraValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallAnotherWebSeviceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LimoAllOver() {
            this.Url = global::Lemo.Properties.Settings.Default.Lemo_Service1_LimoAllOver;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAllCarsCompletedEventHandler GetAllCarsCompleted;
        
        /// <remarks/>
        public event GetJobDetailsBeforeAssignCompletedEventHandler GetJobDetailsBeforeAssignCompleted;
        
        /// <remarks/>
        public event GetJobDetailsCompletedEventHandler GetJobDetailsCompleted;
        
        /// <remarks/>
        public event GetAllCompaniesCompletedEventHandler GetAllCompaniesCompleted;
        
        /// <remarks/>
        public event GetAllDriversCompletedEventHandler GetAllDriversCompleted;
        
        /// <remarks/>
        public event GetDriverLocationCompletedEventHandler GetDriverLocationCompleted;
        
        /// <remarks/>
        public event UpdateDriverLocationCompletedEventHandler UpdateDriverLocationCompleted;
        
        /// <remarks/>
        public event ChangeDriverStatusCompletedEventHandler ChangeDriverStatusCompleted;
        
        /// <remarks/>
        public event ChangeDriverWorkStatusCompletedEventHandler ChangeDriverWorkStatusCompleted;
        
        /// <remarks/>
        public event DriverStatusCompletedEventHandler DriverStatusCompleted;
        
        /// <remarks/>
        public event assignDriverToJobCompletedEventHandler assignDriverToJobCompleted;
        
        /// <remarks/>
        public event registerDriverCompletedEventHandler registerDriverCompleted;
        
        /// <remarks/>
        public event DriverLoginCompletedEventHandler DriverLoginCompleted;
        
        /// <remarks/>
        public event DriverCLoginCompletedEventHandler DriverCLoginCompleted;
        
        /// <remarks/>
        public event SendNotifcationToDriverCompletedEventHandler SendNotifcationToDriverCompleted;
        
        /// <remarks/>
        public event UpdateDriverTokenCompletedEventHandler UpdateDriverTokenCompleted;
        
        /// <remarks/>
        public event UpdateSettingCompletedEventHandler UpdateSettingCompleted;
        
        /// <remarks/>
        public event AcceptCallCompletedEventHandler AcceptCallCompleted;
        
        /// <remarks/>
        public event AcceptCall2CompletedEventHandler AcceptCall2Completed;
        
        /// <remarks/>
        public event AcceptCall3CompletedEventHandler AcceptCall3Completed;
        
        /// <remarks/>
        public event GetDriversNearMeCompletedEventHandler GetDriversNearMeCompleted;
        
        /// <remarks/>
        public event SendMessgaeToDriversCompletedEventHandler SendMessgaeToDriversCompleted;
        
        /// <remarks/>
        public event SendJobToDriverCompletedEventHandler SendJobToDriverCompleted;
        
        /// <remarks/>
        public event UpdateJobStatusCompletedEventHandler UpdateJobStatusCompleted;
        
        /// <remarks/>
        public event UpdateJobExtraValuesCompletedEventHandler UpdateJobExtraValuesCompleted;
        
        /// <remarks/>
        public event CallAnotherWebSeviceCompletedEventHandler CallAnotherWebSeviceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllCars", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Car[] GetAllCars(string cityFrom, string cityTo, int NumOfPassangers, int numberOfHour, int numberOfMile) {
            object[] results = this.Invoke("GetAllCars", new object[] {
                        cityFrom,
                        cityTo,
                        NumOfPassangers,
                        numberOfHour,
                        numberOfMile});
            return ((Car[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllCarsAsync(string cityFrom, string cityTo, int NumOfPassangers, int numberOfHour, int numberOfMile) {
            this.GetAllCarsAsync(cityFrom, cityTo, NumOfPassangers, numberOfHour, numberOfMile, null);
        }
        
        /// <remarks/>
        public void GetAllCarsAsync(string cityFrom, string cityTo, int NumOfPassangers, int numberOfHour, int numberOfMile, object userState) {
            if ((this.GetAllCarsOperationCompleted == null)) {
                this.GetAllCarsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCarsOperationCompleted);
            }
            this.InvokeAsync("GetAllCars", new object[] {
                        cityFrom,
                        cityTo,
                        NumOfPassangers,
                        numberOfHour,
                        numberOfMile}, this.GetAllCarsOperationCompleted, userState);
        }
        
        private void OnGetAllCarsOperationCompleted(object arg) {
            if ((this.GetAllCarsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCarsCompleted(this, new GetAllCarsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobDetailsBeforeAssign", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Job[] GetJobDetailsBeforeAssign(int JobID) {
            object[] results = this.Invoke("GetJobDetailsBeforeAssign", new object[] {
                        JobID});
            return ((Job[])(results[0]));
        }
        
        /// <remarks/>
        public void GetJobDetailsBeforeAssignAsync(int JobID) {
            this.GetJobDetailsBeforeAssignAsync(JobID, null);
        }
        
        /// <remarks/>
        public void GetJobDetailsBeforeAssignAsync(int JobID, object userState) {
            if ((this.GetJobDetailsBeforeAssignOperationCompleted == null)) {
                this.GetJobDetailsBeforeAssignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobDetailsBeforeAssignOperationCompleted);
            }
            this.InvokeAsync("GetJobDetailsBeforeAssign", new object[] {
                        JobID}, this.GetJobDetailsBeforeAssignOperationCompleted, userState);
        }
        
        private void OnGetJobDetailsBeforeAssignOperationCompleted(object arg) {
            if ((this.GetJobDetailsBeforeAssignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobDetailsBeforeAssignCompleted(this, new GetJobDetailsBeforeAssignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetJobDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Job[] GetJobDetails(int JobID) {
            object[] results = this.Invoke("GetJobDetails", new object[] {
                        JobID});
            return ((Job[])(results[0]));
        }
        
        /// <remarks/>
        public void GetJobDetailsAsync(int JobID) {
            this.GetJobDetailsAsync(JobID, null);
        }
        
        /// <remarks/>
        public void GetJobDetailsAsync(int JobID, object userState) {
            if ((this.GetJobDetailsOperationCompleted == null)) {
                this.GetJobDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobDetailsOperationCompleted);
            }
            this.InvokeAsync("GetJobDetails", new object[] {
                        JobID}, this.GetJobDetailsOperationCompleted, userState);
        }
        
        private void OnGetJobDetailsOperationCompleted(object arg) {
            if ((this.GetJobDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobDetailsCompleted(this, new GetJobDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllCompanies", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Company[] GetAllCompanies() {
            object[] results = this.Invoke("GetAllCompanies", new object[0]);
            return ((Company[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllCompaniesAsync() {
            this.GetAllCompaniesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllCompaniesAsync(object userState) {
            if ((this.GetAllCompaniesOperationCompleted == null)) {
                this.GetAllCompaniesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCompaniesOperationCompleted);
            }
            this.InvokeAsync("GetAllCompanies", new object[0], this.GetAllCompaniesOperationCompleted, userState);
        }
        
        private void OnGetAllCompaniesOperationCompleted(object arg) {
            if ((this.GetAllCompaniesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCompaniesCompleted(this, new GetAllCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllDrivers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Driver[] GetAllDrivers() {
            object[] results = this.Invoke("GetAllDrivers", new object[0]);
            return ((Driver[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllDriversAsync() {
            this.GetAllDriversAsync(null);
        }
        
        /// <remarks/>
        public void GetAllDriversAsync(object userState) {
            if ((this.GetAllDriversOperationCompleted == null)) {
                this.GetAllDriversOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDriversOperationCompleted);
            }
            this.InvokeAsync("GetAllDrivers", new object[0], this.GetAllDriversOperationCompleted, userState);
        }
        
        private void OnGetAllDriversOperationCompleted(object arg) {
            if ((this.GetAllDriversCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllDriversCompleted(this, new GetAllDriversCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDriverLocation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DriverLocation[] GetDriverLocation() {
            object[] results = this.Invoke("GetDriverLocation", new object[0]);
            return ((DriverLocation[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDriverLocationAsync() {
            this.GetDriverLocationAsync(null);
        }
        
        /// <remarks/>
        public void GetDriverLocationAsync(object userState) {
            if ((this.GetDriverLocationOperationCompleted == null)) {
                this.GetDriverLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDriverLocationOperationCompleted);
            }
            this.InvokeAsync("GetDriverLocation", new object[0], this.GetDriverLocationOperationCompleted, userState);
        }
        
        private void OnGetDriverLocationOperationCompleted(object arg) {
            if ((this.GetDriverLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDriverLocationCompleted(this, new GetDriverLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDriverLocation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateDriverLocation(string Lat, string Lng, int DriverID) {
            object[] results = this.Invoke("UpdateDriverLocation", new object[] {
                        Lat,
                        Lng,
                        DriverID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDriverLocationAsync(string Lat, string Lng, int DriverID) {
            this.UpdateDriverLocationAsync(Lat, Lng, DriverID, null);
        }
        
        /// <remarks/>
        public void UpdateDriverLocationAsync(string Lat, string Lng, int DriverID, object userState) {
            if ((this.UpdateDriverLocationOperationCompleted == null)) {
                this.UpdateDriverLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDriverLocationOperationCompleted);
            }
            this.InvokeAsync("UpdateDriverLocation", new object[] {
                        Lat,
                        Lng,
                        DriverID}, this.UpdateDriverLocationOperationCompleted, userState);
        }
        
        private void OnUpdateDriverLocationOperationCompleted(object arg) {
            if ((this.UpdateDriverLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDriverLocationCompleted(this, new UpdateDriverLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeDriverStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangeDriverStatus(int jobID, int JobStatusID, int DriverID) {
            object[] results = this.Invoke("ChangeDriverStatus", new object[] {
                        jobID,
                        JobStatusID,
                        DriverID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeDriverStatusAsync(int jobID, int JobStatusID, int DriverID) {
            this.ChangeDriverStatusAsync(jobID, JobStatusID, DriverID, null);
        }
        
        /// <remarks/>
        public void ChangeDriverStatusAsync(int jobID, int JobStatusID, int DriverID, object userState) {
            if ((this.ChangeDriverStatusOperationCompleted == null)) {
                this.ChangeDriverStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeDriverStatusOperationCompleted);
            }
            this.InvokeAsync("ChangeDriverStatus", new object[] {
                        jobID,
                        JobStatusID,
                        DriverID}, this.ChangeDriverStatusOperationCompleted, userState);
        }
        
        private void OnChangeDriverStatusOperationCompleted(object arg) {
            if ((this.ChangeDriverStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeDriverStatusCompleted(this, new ChangeDriverStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeDriverWorkStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangeDriverWorkStatus(bool StatusID, int DriverID) {
            object[] results = this.Invoke("ChangeDriverWorkStatus", new object[] {
                        StatusID,
                        DriverID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeDriverWorkStatusAsync(bool StatusID, int DriverID) {
            this.ChangeDriverWorkStatusAsync(StatusID, DriverID, null);
        }
        
        /// <remarks/>
        public void ChangeDriverWorkStatusAsync(bool StatusID, int DriverID, object userState) {
            if ((this.ChangeDriverWorkStatusOperationCompleted == null)) {
                this.ChangeDriverWorkStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeDriverWorkStatusOperationCompleted);
            }
            this.InvokeAsync("ChangeDriverWorkStatus", new object[] {
                        StatusID,
                        DriverID}, this.ChangeDriverWorkStatusOperationCompleted, userState);
        }
        
        private void OnChangeDriverWorkStatusOperationCompleted(object arg) {
            if ((this.ChangeDriverWorkStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeDriverWorkStatusCompleted(this, new ChangeDriverWorkStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DriverStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DriverStatus(bool StatusID, int DriverID) {
            object[] results = this.Invoke("DriverStatus", new object[] {
                        StatusID,
                        DriverID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DriverStatusAsync(bool StatusID, int DriverID) {
            this.DriverStatusAsync(StatusID, DriverID, null);
        }
        
        /// <remarks/>
        public void DriverStatusAsync(bool StatusID, int DriverID, object userState) {
            if ((this.DriverStatusOperationCompleted == null)) {
                this.DriverStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDriverStatusOperationCompleted);
            }
            this.InvokeAsync("DriverStatus", new object[] {
                        StatusID,
                        DriverID}, this.DriverStatusOperationCompleted, userState);
        }
        
        private void OnDriverStatusOperationCompleted(object arg) {
            if ((this.DriverStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DriverStatusCompleted(this, new DriverStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/assignDriverToJob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string assignDriverToJob(int jobID, int JobStatusID, int DriverID) {
            object[] results = this.Invoke("assignDriverToJob", new object[] {
                        jobID,
                        JobStatusID,
                        DriverID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void assignDriverToJobAsync(int jobID, int JobStatusID, int DriverID) {
            this.assignDriverToJobAsync(jobID, JobStatusID, DriverID, null);
        }
        
        /// <remarks/>
        public void assignDriverToJobAsync(int jobID, int JobStatusID, int DriverID, object userState) {
            if ((this.assignDriverToJobOperationCompleted == null)) {
                this.assignDriverToJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnassignDriverToJobOperationCompleted);
            }
            this.InvokeAsync("assignDriverToJob", new object[] {
                        jobID,
                        JobStatusID,
                        DriverID}, this.assignDriverToJobOperationCompleted, userState);
        }
        
        private void OnassignDriverToJobOperationCompleted(object arg) {
            if ((this.assignDriverToJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.assignDriverToJobCompleted(this, new assignDriverToJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/registerDriver", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string registerDriver(string FName, string LName, string Phone, string Email, string Password, int StatusID, int CarTypeID, string DeviceToken, int CompanyID) {
            object[] results = this.Invoke("registerDriver", new object[] {
                        FName,
                        LName,
                        Phone,
                        Email,
                        Password,
                        StatusID,
                        CarTypeID,
                        DeviceToken,
                        CompanyID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void registerDriverAsync(string FName, string LName, string Phone, string Email, string Password, int StatusID, int CarTypeID, string DeviceToken, int CompanyID) {
            this.registerDriverAsync(FName, LName, Phone, Email, Password, StatusID, CarTypeID, DeviceToken, CompanyID, null);
        }
        
        /// <remarks/>
        public void registerDriverAsync(string FName, string LName, string Phone, string Email, string Password, int StatusID, int CarTypeID, string DeviceToken, int CompanyID, object userState) {
            if ((this.registerDriverOperationCompleted == null)) {
                this.registerDriverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterDriverOperationCompleted);
            }
            this.InvokeAsync("registerDriver", new object[] {
                        FName,
                        LName,
                        Phone,
                        Email,
                        Password,
                        StatusID,
                        CarTypeID,
                        DeviceToken,
                        CompanyID}, this.registerDriverOperationCompleted, userState);
        }
        
        private void OnregisterDriverOperationCompleted(object arg) {
            if ((this.registerDriverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerDriverCompleted(this, new registerDriverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DriverLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DriverLogin[] DriverLogin(string Phone, string Password, string driverToken) {
            object[] results = this.Invoke("DriverLogin", new object[] {
                        Phone,
                        Password,
                        driverToken});
            return ((DriverLogin[])(results[0]));
        }
        
        /// <remarks/>
        public void DriverLoginAsync(string Phone, string Password, string driverToken) {
            this.DriverLoginAsync(Phone, Password, driverToken, null);
        }
        
        /// <remarks/>
        public void DriverLoginAsync(string Phone, string Password, string driverToken, object userState) {
            if ((this.DriverLoginOperationCompleted == null)) {
                this.DriverLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDriverLoginOperationCompleted);
            }
            this.InvokeAsync("DriverLogin", new object[] {
                        Phone,
                        Password,
                        driverToken}, this.DriverLoginOperationCompleted, userState);
        }
        
        private void OnDriverLoginOperationCompleted(object arg) {
            if ((this.DriverLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DriverLoginCompleted(this, new DriverLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DriverCLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DriverLogin[] DriverCLogin(string Phone, string Password, string CompanyName) {
            object[] results = this.Invoke("DriverCLogin", new object[] {
                        Phone,
                        Password,
                        CompanyName});
            return ((DriverLogin[])(results[0]));
        }
        
        /// <remarks/>
        public void DriverCLoginAsync(string Phone, string Password, string CompanyName) {
            this.DriverCLoginAsync(Phone, Password, CompanyName, null);
        }
        
        /// <remarks/>
        public void DriverCLoginAsync(string Phone, string Password, string CompanyName, object userState) {
            if ((this.DriverCLoginOperationCompleted == null)) {
                this.DriverCLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDriverCLoginOperationCompleted);
            }
            this.InvokeAsync("DriverCLogin", new object[] {
                        Phone,
                        Password,
                        CompanyName}, this.DriverCLoginOperationCompleted, userState);
        }
        
        private void OnDriverCLoginOperationCompleted(object arg) {
            if ((this.DriverCLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DriverCLoginCompleted(this, new DriverCLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendNotifcationToDriver", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendNotifcationToDriver(string NotifcationMsg, int DriverID) {
            object[] results = this.Invoke("SendNotifcationToDriver", new object[] {
                        NotifcationMsg,
                        DriverID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendNotifcationToDriverAsync(string NotifcationMsg, int DriverID) {
            this.SendNotifcationToDriverAsync(NotifcationMsg, DriverID, null);
        }
        
        /// <remarks/>
        public void SendNotifcationToDriverAsync(string NotifcationMsg, int DriverID, object userState) {
            if ((this.SendNotifcationToDriverOperationCompleted == null)) {
                this.SendNotifcationToDriverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendNotifcationToDriverOperationCompleted);
            }
            this.InvokeAsync("SendNotifcationToDriver", new object[] {
                        NotifcationMsg,
                        DriverID}, this.SendNotifcationToDriverOperationCompleted, userState);
        }
        
        private void OnSendNotifcationToDriverOperationCompleted(object arg) {
            if ((this.SendNotifcationToDriverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendNotifcationToDriverCompleted(this, new SendNotifcationToDriverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDriverToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateDriverToken(string driverToken, string DriverID, string DeviceType) {
            object[] results = this.Invoke("UpdateDriverToken", new object[] {
                        driverToken,
                        DriverID,
                        DeviceType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDriverTokenAsync(string driverToken, string DriverID, string DeviceType) {
            this.UpdateDriverTokenAsync(driverToken, DriverID, DeviceType, null);
        }
        
        /// <remarks/>
        public void UpdateDriverTokenAsync(string driverToken, string DriverID, string DeviceType, object userState) {
            if ((this.UpdateDriverTokenOperationCompleted == null)) {
                this.UpdateDriverTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDriverTokenOperationCompleted);
            }
            this.InvokeAsync("UpdateDriverToken", new object[] {
                        driverToken,
                        DriverID,
                        DeviceType}, this.UpdateDriverTokenOperationCompleted, userState);
        }
        
        private void OnUpdateDriverTokenOperationCompleted(object arg) {
            if ((this.UpdateDriverTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDriverTokenCompleted(this, new UpdateDriverTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSetting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateSetting(string CPH, string CPM, string CarID, bool StatusID, string DriverID) {
            object[] results = this.Invoke("UpdateSetting", new object[] {
                        CPH,
                        CPM,
                        CarID,
                        StatusID,
                        DriverID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSettingAsync(string CPH, string CPM, string CarID, bool StatusID, string DriverID) {
            this.UpdateSettingAsync(CPH, CPM, CarID, StatusID, DriverID, null);
        }
        
        /// <remarks/>
        public void UpdateSettingAsync(string CPH, string CPM, string CarID, bool StatusID, string DriverID, object userState) {
            if ((this.UpdateSettingOperationCompleted == null)) {
                this.UpdateSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSettingOperationCompleted);
            }
            this.InvokeAsync("UpdateSetting", new object[] {
                        CPH,
                        CPM,
                        CarID,
                        StatusID,
                        DriverID}, this.UpdateSettingOperationCompleted, userState);
        }
        
        private void OnUpdateSettingOperationCompleted(object arg) {
            if ((this.UpdateSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSettingCompleted(this, new UpdateSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AcceptCall", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Job[] AcceptCall(int nDriverID, int JobID, bool bAcceptStatus, string sCarId) {
            object[] results = this.Invoke("AcceptCall", new object[] {
                        nDriverID,
                        JobID,
                        bAcceptStatus,
                        sCarId});
            return ((Job[])(results[0]));
        }
        
        /// <remarks/>
        public void AcceptCallAsync(int nDriverID, int JobID, bool bAcceptStatus, string sCarId) {
            this.AcceptCallAsync(nDriverID, JobID, bAcceptStatus, sCarId, null);
        }
        
        /// <remarks/>
        public void AcceptCallAsync(int nDriverID, int JobID, bool bAcceptStatus, string sCarId, object userState) {
            if ((this.AcceptCallOperationCompleted == null)) {
                this.AcceptCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcceptCallOperationCompleted);
            }
            this.InvokeAsync("AcceptCall", new object[] {
                        nDriverID,
                        JobID,
                        bAcceptStatus,
                        sCarId}, this.AcceptCallOperationCompleted, userState);
        }
        
        private void OnAcceptCallOperationCompleted(object arg) {
            if ((this.AcceptCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcceptCallCompleted(this, new AcceptCallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AcceptCall2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Job[] AcceptCall2(int nDriverID, int JobID, bool bAcceptStatus, string sCarId) {
            object[] results = this.Invoke("AcceptCall2", new object[] {
                        nDriverID,
                        JobID,
                        bAcceptStatus,
                        sCarId});
            return ((Job[])(results[0]));
        }
        
        /// <remarks/>
        public void AcceptCall2Async(int nDriverID, int JobID, bool bAcceptStatus, string sCarId) {
            this.AcceptCall2Async(nDriverID, JobID, bAcceptStatus, sCarId, null);
        }
        
        /// <remarks/>
        public void AcceptCall2Async(int nDriverID, int JobID, bool bAcceptStatus, string sCarId, object userState) {
            if ((this.AcceptCall2OperationCompleted == null)) {
                this.AcceptCall2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcceptCall2OperationCompleted);
            }
            this.InvokeAsync("AcceptCall2", new object[] {
                        nDriverID,
                        JobID,
                        bAcceptStatus,
                        sCarId}, this.AcceptCall2OperationCompleted, userState);
        }
        
        private void OnAcceptCall2OperationCompleted(object arg) {
            if ((this.AcceptCall2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcceptCall2Completed(this, new AcceptCall2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AcceptCall3", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AcceptCall3(int nDriverID, int JobID, bool bAcceptStatus, string sCarId) {
            object[] results = this.Invoke("AcceptCall3", new object[] {
                        nDriverID,
                        JobID,
                        bAcceptStatus,
                        sCarId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AcceptCall3Async(int nDriverID, int JobID, bool bAcceptStatus, string sCarId) {
            this.AcceptCall3Async(nDriverID, JobID, bAcceptStatus, sCarId, null);
        }
        
        /// <remarks/>
        public void AcceptCall3Async(int nDriverID, int JobID, bool bAcceptStatus, string sCarId, object userState) {
            if ((this.AcceptCall3OperationCompleted == null)) {
                this.AcceptCall3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcceptCall3OperationCompleted);
            }
            this.InvokeAsync("AcceptCall3", new object[] {
                        nDriverID,
                        JobID,
                        bAcceptStatus,
                        sCarId}, this.AcceptCall3OperationCompleted, userState);
        }
        
        private void OnAcceptCall3OperationCompleted(object arg) {
            if ((this.AcceptCall3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcceptCall3Completed(this, new AcceptCall3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDriversNearMe", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetDriversNearMe(string Longitude, string Latitude, string DistanceWithMile, int nJobId) {
            object[] results = this.Invoke("GetDriversNearMe", new object[] {
                        Longitude,
                        Latitude,
                        DistanceWithMile,
                        nJobId});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetDriversNearMeAsync(string Longitude, string Latitude, string DistanceWithMile, int nJobId) {
            this.GetDriversNearMeAsync(Longitude, Latitude, DistanceWithMile, nJobId, null);
        }
        
        /// <remarks/>
        public void GetDriversNearMeAsync(string Longitude, string Latitude, string DistanceWithMile, int nJobId, object userState) {
            if ((this.GetDriversNearMeOperationCompleted == null)) {
                this.GetDriversNearMeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDriversNearMeOperationCompleted);
            }
            this.InvokeAsync("GetDriversNearMe", new object[] {
                        Longitude,
                        Latitude,
                        DistanceWithMile,
                        nJobId}, this.GetDriversNearMeOperationCompleted, userState);
        }
        
        private void OnGetDriversNearMeOperationCompleted(object arg) {
            if ((this.GetDriversNearMeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDriversNearMeCompleted(this, new GetDriversNearMeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessgaeToDrivers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SendMessgaeToDrivers(string sMessage) {
            object[] results = this.Invoke("SendMessgaeToDrivers", new object[] {
                        sMessage});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessgaeToDriversAsync(string sMessage) {
            this.SendMessgaeToDriversAsync(sMessage, null);
        }
        
        /// <remarks/>
        public void SendMessgaeToDriversAsync(string sMessage, object userState) {
            if ((this.SendMessgaeToDriversOperationCompleted == null)) {
                this.SendMessgaeToDriversOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessgaeToDriversOperationCompleted);
            }
            this.InvokeAsync("SendMessgaeToDrivers", new object[] {
                        sMessage}, this.SendMessgaeToDriversOperationCompleted, userState);
        }
        
        private void OnSendMessgaeToDriversOperationCompleted(object arg) {
            if ((this.SendMessgaeToDriversCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessgaeToDriversCompleted(this, new SendMessgaeToDriversCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendJobToDriver", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SendJobToDriver(int nDriverID, int nJobId) {
            object[] results = this.Invoke("SendJobToDriver", new object[] {
                        nDriverID,
                        nJobId});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SendJobToDriverAsync(int nDriverID, int nJobId) {
            this.SendJobToDriverAsync(nDriverID, nJobId, null);
        }
        
        /// <remarks/>
        public void SendJobToDriverAsync(int nDriverID, int nJobId, object userState) {
            if ((this.SendJobToDriverOperationCompleted == null)) {
                this.SendJobToDriverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendJobToDriverOperationCompleted);
            }
            this.InvokeAsync("SendJobToDriver", new object[] {
                        nDriverID,
                        nJobId}, this.SendJobToDriverOperationCompleted, userState);
        }
        
        private void OnSendJobToDriverOperationCompleted(object arg) {
            if ((this.SendJobToDriverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendJobToDriverCompleted(this, new SendJobToDriverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateJobStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateJobStatus(string Lat, string Lng, int DriverID, int nJobStatus, int nJobId) {
            object[] results = this.Invoke("UpdateJobStatus", new object[] {
                        Lat,
                        Lng,
                        DriverID,
                        nJobStatus,
                        nJobId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateJobStatusAsync(string Lat, string Lng, int DriverID, int nJobStatus, int nJobId) {
            this.UpdateJobStatusAsync(Lat, Lng, DriverID, nJobStatus, nJobId, null);
        }
        
        /// <remarks/>
        public void UpdateJobStatusAsync(string Lat, string Lng, int DriverID, int nJobStatus, int nJobId, object userState) {
            if ((this.UpdateJobStatusOperationCompleted == null)) {
                this.UpdateJobStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateJobStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateJobStatus", new object[] {
                        Lat,
                        Lng,
                        DriverID,
                        nJobStatus,
                        nJobId}, this.UpdateJobStatusOperationCompleted, userState);
        }
        
        private void OnUpdateJobStatusOperationCompleted(object arg) {
            if ((this.UpdateJobStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateJobStatusCompleted(this, new UpdateJobStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateJobExtraValues", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateJobExtraValues(string sTolls, string sParking, string sExtraGr, string sMisc1, string sMisc2, string sOtherPrice, int nJobId) {
            object[] results = this.Invoke("UpdateJobExtraValues", new object[] {
                        sTolls,
                        sParking,
                        sExtraGr,
                        sMisc1,
                        sMisc2,
                        sOtherPrice,
                        nJobId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateJobExtraValuesAsync(string sTolls, string sParking, string sExtraGr, string sMisc1, string sMisc2, string sOtherPrice, int nJobId) {
            this.UpdateJobExtraValuesAsync(sTolls, sParking, sExtraGr, sMisc1, sMisc2, sOtherPrice, nJobId, null);
        }
        
        /// <remarks/>
        public void UpdateJobExtraValuesAsync(string sTolls, string sParking, string sExtraGr, string sMisc1, string sMisc2, string sOtherPrice, int nJobId, object userState) {
            if ((this.UpdateJobExtraValuesOperationCompleted == null)) {
                this.UpdateJobExtraValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateJobExtraValuesOperationCompleted);
            }
            this.InvokeAsync("UpdateJobExtraValues", new object[] {
                        sTolls,
                        sParking,
                        sExtraGr,
                        sMisc1,
                        sMisc2,
                        sOtherPrice,
                        nJobId}, this.UpdateJobExtraValuesOperationCompleted, userState);
        }
        
        private void OnUpdateJobExtraValuesOperationCompleted(object arg) {
            if ((this.UpdateJobExtraValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateJobExtraValuesCompleted(this, new UpdateJobExtraValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CallAnotherWebSevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CallAnotherWebSevice(string CompanyAlias, string UserName, string Password, string DeviceId, string DeviceType, string AppVersion, string EnvType, string DeviceName, string OsVersion) {
            object[] results = this.Invoke("CallAnotherWebSevice", new object[] {
                        CompanyAlias,
                        UserName,
                        Password,
                        DeviceId,
                        DeviceType,
                        AppVersion,
                        EnvType,
                        DeviceName,
                        OsVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CallAnotherWebSeviceAsync(string CompanyAlias, string UserName, string Password, string DeviceId, string DeviceType, string AppVersion, string EnvType, string DeviceName, string OsVersion) {
            this.CallAnotherWebSeviceAsync(CompanyAlias, UserName, Password, DeviceId, DeviceType, AppVersion, EnvType, DeviceName, OsVersion, null);
        }
        
        /// <remarks/>
        public void CallAnotherWebSeviceAsync(string CompanyAlias, string UserName, string Password, string DeviceId, string DeviceType, string AppVersion, string EnvType, string DeviceName, string OsVersion, object userState) {
            if ((this.CallAnotherWebSeviceOperationCompleted == null)) {
                this.CallAnotherWebSeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallAnotherWebSeviceOperationCompleted);
            }
            this.InvokeAsync("CallAnotherWebSevice", new object[] {
                        CompanyAlias,
                        UserName,
                        Password,
                        DeviceId,
                        DeviceType,
                        AppVersion,
                        EnvType,
                        DeviceName,
                        OsVersion}, this.CallAnotherWebSeviceOperationCompleted, userState);
        }
        
        private void OnCallAnotherWebSeviceOperationCompleted(object arg) {
            if ((this.CallAnotherWebSeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallAnotherWebSeviceCompleted(this, new CallAnotherWebSeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Car {
        
        private int carIDField;
        
        private string carNameField;
        
        private string descriptionField;
        
        private int companyIDField;
        
        private int noPassengersField;
        
        private float pricePerHoreField;
        
        private float pricePerMaileField;
        
        private string limoAPIIDField;
        
        private string limoAPIKeyField;
        
        private string companyNameField;
        
        private string totalPriceField;
        
        private string imagePathField;
        
        /// <remarks/>
        public int CarID {
            get {
                return this.carIDField;
            }
            set {
                this.carIDField = value;
            }
        }
        
        /// <remarks/>
        public string CarName {
            get {
                return this.carNameField;
            }
            set {
                this.carNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int CompanyID {
            get {
                return this.companyIDField;
            }
            set {
                this.companyIDField = value;
            }
        }
        
        /// <remarks/>
        public int NoPassengers {
            get {
                return this.noPassengersField;
            }
            set {
                this.noPassengersField = value;
            }
        }
        
        /// <remarks/>
        public float PricePerHore {
            get {
                return this.pricePerHoreField;
            }
            set {
                this.pricePerHoreField = value;
            }
        }
        
        /// <remarks/>
        public float PricePerMaile {
            get {
                return this.pricePerMaileField;
            }
            set {
                this.pricePerMaileField = value;
            }
        }
        
        /// <remarks/>
        public string LimoAPIID {
            get {
                return this.limoAPIIDField;
            }
            set {
                this.limoAPIIDField = value;
            }
        }
        
        /// <remarks/>
        public string LimoAPIKey {
            get {
                return this.limoAPIKeyField;
            }
            set {
                this.limoAPIKeyField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public string TotalPrice {
            get {
                return this.totalPriceField;
            }
            set {
                this.totalPriceField = value;
            }
        }
        
        /// <remarks/>
        public string ImagePath {
            get {
                return this.imagePathField;
            }
            set {
                this.imagePathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DriverLogin {
        
        private string carNameField;
        
        private int noPassengersField;
        
        private float pricePerHoreField;
        
        private float pricePerMaileField;
        
        private string carNumberField;
        
        private int driverIDField;
        
        private int carIDField;
        
        /// <remarks/>
        public string CarName {
            get {
                return this.carNameField;
            }
            set {
                this.carNameField = value;
            }
        }
        
        /// <remarks/>
        public int NoPassengers {
            get {
                return this.noPassengersField;
            }
            set {
                this.noPassengersField = value;
            }
        }
        
        /// <remarks/>
        public float PricePerHore {
            get {
                return this.pricePerHoreField;
            }
            set {
                this.pricePerHoreField = value;
            }
        }
        
        /// <remarks/>
        public float PricePerMaile {
            get {
                return this.pricePerMaileField;
            }
            set {
                this.pricePerMaileField = value;
            }
        }
        
        /// <remarks/>
        public string CarNumber {
            get {
                return this.carNumberField;
            }
            set {
                this.carNumberField = value;
            }
        }
        
        /// <remarks/>
        public int DriverID {
            get {
                return this.driverIDField;
            }
            set {
                this.driverIDField = value;
            }
        }
        
        /// <remarks/>
        public int CarID {
            get {
                return this.carIDField;
            }
            set {
                this.carIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DriverLocation {
        
        private int driverLocationIDField;
        
        private string latField;
        
        private string lngField;
        
        private int driverIDField;
        
        /// <remarks/>
        public int DriverLocationID {
            get {
                return this.driverLocationIDField;
            }
            set {
                this.driverLocationIDField = value;
            }
        }
        
        /// <remarks/>
        public string Lat {
            get {
                return this.latField;
            }
            set {
                this.latField = value;
            }
        }
        
        /// <remarks/>
        public string Lng {
            get {
                return this.lngField;
            }
            set {
                this.lngField = value;
            }
        }
        
        /// <remarks/>
        public int DriverID {
            get {
                return this.driverIDField;
            }
            set {
                this.driverIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Driver {
        
        private string carNameField;
        
        private string descriptionField;
        
        private int noPassengersField;
        
        private string photoNameField;
        
        private float pricePerHoreField;
        
        private float pricePerMaileField;
        
        private string fNameField;
        
        private string lNameField;
        
        private string emailField;
        
        private string phoneField;
        
        private string deviceTokenField;
        
        private bool showOnMapField;
        
        private string latField;
        
        private string lngField;
        
        private bool jobStatusField;
        
        private string drvierImagePathField;
        
        private string totalRateField;
        
        private int driverIDField;
        
        /// <remarks/>
        public string CarName {
            get {
                return this.carNameField;
            }
            set {
                this.carNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int NoPassengers {
            get {
                return this.noPassengersField;
            }
            set {
                this.noPassengersField = value;
            }
        }
        
        /// <remarks/>
        public string PhotoName {
            get {
                return this.photoNameField;
            }
            set {
                this.photoNameField = value;
            }
        }
        
        /// <remarks/>
        public float PricePerHore {
            get {
                return this.pricePerHoreField;
            }
            set {
                this.pricePerHoreField = value;
            }
        }
        
        /// <remarks/>
        public float PricePerMaile {
            get {
                return this.pricePerMaileField;
            }
            set {
                this.pricePerMaileField = value;
            }
        }
        
        /// <remarks/>
        public string FName {
            get {
                return this.fNameField;
            }
            set {
                this.fNameField = value;
            }
        }
        
        /// <remarks/>
        public string LName {
            get {
                return this.lNameField;
            }
            set {
                this.lNameField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string DeviceToken {
            get {
                return this.deviceTokenField;
            }
            set {
                this.deviceTokenField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowOnMap {
            get {
                return this.showOnMapField;
            }
            set {
                this.showOnMapField = value;
            }
        }
        
        /// <remarks/>
        public string Lat {
            get {
                return this.latField;
            }
            set {
                this.latField = value;
            }
        }
        
        /// <remarks/>
        public string Lng {
            get {
                return this.lngField;
            }
            set {
                this.lngField = value;
            }
        }
        
        /// <remarks/>
        public bool JobStatus {
            get {
                return this.jobStatusField;
            }
            set {
                this.jobStatusField = value;
            }
        }
        
        /// <remarks/>
        public string DrvierImagePath {
            get {
                return this.drvierImagePathField;
            }
            set {
                this.drvierImagePathField = value;
            }
        }
        
        /// <remarks/>
        public string TotalRate {
            get {
                return this.totalRateField;
            }
            set {
                this.totalRateField = value;
            }
        }
        
        /// <remarks/>
        public int DriverID {
            get {
                return this.driverIDField;
            }
            set {
                this.driverIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Company {
        
        private int companyIDField;
        
        private string companyNameField;
        
        private string limoAPIIDField;
        
        private string limoAPIKeyField;
        
        /// <remarks/>
        public int CompanyID {
            get {
                return this.companyIDField;
            }
            set {
                this.companyIDField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public string LimoAPIID {
            get {
                return this.limoAPIIDField;
            }
            set {
                this.limoAPIIDField = value;
            }
        }
        
        /// <remarks/>
        public string LimoAPIKey {
            get {
                return this.limoAPIKeyField;
            }
            set {
                this.limoAPIKeyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Job {
        
        private int userIDField;
        
        private int jobIDField;
        
        private int companyCarIDField;
        
        private string fromAddressField;
        
        private string toAddressField;
        
        private int cityIDField;
        
        private int timeHourField;
        
        private int timeMinuteField;
        
        private float totalPriceField;
        
        private float estimatedFarePriceField;
        
        private float gratuityPriceField;
        
        private float processingFeeField;
        
        private float taxesField;
        
        private float otherPriceField;
        
        private string notesField;
        
        private string limoConfirmNumberField;
        
        private string comapnyConfirmNumField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string mobileField;
        
        private string emailField;
        
        private string jobDateField;
        
        private string jobTimeField;
        
        private string priceNoteField;
        
        private int driverIDField;
        
        private int tripConfirmationNumberField;
        
        private string authorizationCodeField;
        
        private string authorizInvoiceNumberField;
        
        private int jobStatusIDField;
        
        private string driverFNameField;
        
        private string driverLNameField;
        
        private string driverCarTypeField;
        
        private string driverCarImageField;
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public int JobID {
            get {
                return this.jobIDField;
            }
            set {
                this.jobIDField = value;
            }
        }
        
        /// <remarks/>
        public int CompanyCarID {
            get {
                return this.companyCarIDField;
            }
            set {
                this.companyCarIDField = value;
            }
        }
        
        /// <remarks/>
        public string FromAddress {
            get {
                return this.fromAddressField;
            }
            set {
                this.fromAddressField = value;
            }
        }
        
        /// <remarks/>
        public string ToAddress {
            get {
                return this.toAddressField;
            }
            set {
                this.toAddressField = value;
            }
        }
        
        /// <remarks/>
        public int CityID {
            get {
                return this.cityIDField;
            }
            set {
                this.cityIDField = value;
            }
        }
        
        /// <remarks/>
        public int TimeHour {
            get {
                return this.timeHourField;
            }
            set {
                this.timeHourField = value;
            }
        }
        
        /// <remarks/>
        public int TimeMinute {
            get {
                return this.timeMinuteField;
            }
            set {
                this.timeMinuteField = value;
            }
        }
        
        /// <remarks/>
        public float TotalPrice {
            get {
                return this.totalPriceField;
            }
            set {
                this.totalPriceField = value;
            }
        }
        
        /// <remarks/>
        public float EstimatedFarePrice {
            get {
                return this.estimatedFarePriceField;
            }
            set {
                this.estimatedFarePriceField = value;
            }
        }
        
        /// <remarks/>
        public float GratuityPrice {
            get {
                return this.gratuityPriceField;
            }
            set {
                this.gratuityPriceField = value;
            }
        }
        
        /// <remarks/>
        public float ProcessingFee {
            get {
                return this.processingFeeField;
            }
            set {
                this.processingFeeField = value;
            }
        }
        
        /// <remarks/>
        public float Taxes {
            get {
                return this.taxesField;
            }
            set {
                this.taxesField = value;
            }
        }
        
        /// <remarks/>
        public float OtherPrice {
            get {
                return this.otherPriceField;
            }
            set {
                this.otherPriceField = value;
            }
        }
        
        /// <remarks/>
        public string Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        public string LimoConfirmNumber {
            get {
                return this.limoConfirmNumberField;
            }
            set {
                this.limoConfirmNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ComapnyConfirmNum {
            get {
                return this.comapnyConfirmNumField;
            }
            set {
                this.comapnyConfirmNumField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Mobile {
            get {
                return this.mobileField;
            }
            set {
                this.mobileField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string JobDate {
            get {
                return this.jobDateField;
            }
            set {
                this.jobDateField = value;
            }
        }
        
        /// <remarks/>
        public string JobTime {
            get {
                return this.jobTimeField;
            }
            set {
                this.jobTimeField = value;
            }
        }
        
        /// <remarks/>
        public string PriceNote {
            get {
                return this.priceNoteField;
            }
            set {
                this.priceNoteField = value;
            }
        }
        
        /// <remarks/>
        public int DriverID {
            get {
                return this.driverIDField;
            }
            set {
                this.driverIDField = value;
            }
        }
        
        /// <remarks/>
        public int TripConfirmationNumber {
            get {
                return this.tripConfirmationNumberField;
            }
            set {
                this.tripConfirmationNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AuthorizationCode {
            get {
                return this.authorizationCodeField;
            }
            set {
                this.authorizationCodeField = value;
            }
        }
        
        /// <remarks/>
        public string AuthorizInvoiceNumber {
            get {
                return this.authorizInvoiceNumberField;
            }
            set {
                this.authorizInvoiceNumberField = value;
            }
        }
        
        /// <remarks/>
        public int JobStatusID {
            get {
                return this.jobStatusIDField;
            }
            set {
                this.jobStatusIDField = value;
            }
        }
        
        /// <remarks/>
        public string DriverFName {
            get {
                return this.driverFNameField;
            }
            set {
                this.driverFNameField = value;
            }
        }
        
        /// <remarks/>
        public string DriverLName {
            get {
                return this.driverLNameField;
            }
            set {
                this.driverLNameField = value;
            }
        }
        
        /// <remarks/>
        public string DriverCarType {
            get {
                return this.driverCarTypeField;
            }
            set {
                this.driverCarTypeField = value;
            }
        }
        
        /// <remarks/>
        public string DriverCarImage {
            get {
                return this.driverCarImageField;
            }
            set {
                this.driverCarImageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllCarsCompletedEventHandler(object sender, GetAllCarsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCarsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCarsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Car[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Car[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetJobDetailsBeforeAssignCompletedEventHandler(object sender, GetJobDetailsBeforeAssignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobDetailsBeforeAssignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobDetailsBeforeAssignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Job[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Job[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetJobDetailsCompletedEventHandler(object sender, GetJobDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Job[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Job[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllCompaniesCompletedEventHandler(object sender, GetAllCompaniesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Company[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Company[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllDriversCompletedEventHandler(object sender, GetAllDriversCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllDriversCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllDriversCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Driver[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Driver[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDriverLocationCompletedEventHandler(object sender, GetDriverLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDriverLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDriverLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DriverLocation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DriverLocation[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateDriverLocationCompletedEventHandler(object sender, UpdateDriverLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDriverLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDriverLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ChangeDriverStatusCompletedEventHandler(object sender, ChangeDriverStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeDriverStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeDriverStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ChangeDriverWorkStatusCompletedEventHandler(object sender, ChangeDriverWorkStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeDriverWorkStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeDriverWorkStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DriverStatusCompletedEventHandler(object sender, DriverStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DriverStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DriverStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void assignDriverToJobCompletedEventHandler(object sender, assignDriverToJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class assignDriverToJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal assignDriverToJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void registerDriverCompletedEventHandler(object sender, registerDriverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class registerDriverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal registerDriverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DriverLoginCompletedEventHandler(object sender, DriverLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DriverLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DriverLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DriverLogin[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DriverLogin[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DriverCLoginCompletedEventHandler(object sender, DriverCLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DriverCLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DriverCLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DriverLogin[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DriverLogin[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendNotifcationToDriverCompletedEventHandler(object sender, SendNotifcationToDriverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendNotifcationToDriverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendNotifcationToDriverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateDriverTokenCompletedEventHandler(object sender, UpdateDriverTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDriverTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDriverTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateSettingCompletedEventHandler(object sender, UpdateSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AcceptCallCompletedEventHandler(object sender, AcceptCallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AcceptCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AcceptCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Job[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Job[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AcceptCall2CompletedEventHandler(object sender, AcceptCall2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AcceptCall2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AcceptCall2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Job[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Job[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AcceptCall3CompletedEventHandler(object sender, AcceptCall3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AcceptCall3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AcceptCall3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDriversNearMeCompletedEventHandler(object sender, GetDriversNearMeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDriversNearMeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDriversNearMeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendMessgaeToDriversCompletedEventHandler(object sender, SendMessgaeToDriversCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessgaeToDriversCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessgaeToDriversCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendJobToDriverCompletedEventHandler(object sender, SendJobToDriverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendJobToDriverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendJobToDriverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateJobStatusCompletedEventHandler(object sender, UpdateJobStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateJobStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateJobStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateJobExtraValuesCompletedEventHandler(object sender, UpdateJobExtraValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateJobExtraValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateJobExtraValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CallAnotherWebSeviceCompletedEventHandler(object sender, CallAnotherWebSeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallAnotherWebSeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallAnotherWebSeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591